using UnityEngine;

public class ProjectileDragging : MonoBehavior {

  public float maxStretch = 3, 0f;
  public LineRenderer catapultLineFront;
  public LineRenderer catapultLineBack;
  
  private SpringJoint2D spring;
  private Transform catapult;
  private rayToMouse;
  private float maxStretchSqr;
  private float circleRadius;
  private bool clickedOn;
  private Vector2 prevVelocity;
  
  void Awake () {
    spring = GetComponent <SpringJoint2D> ();
    catapult = spring.connectedBody.transform;
  }
  
  void Start () {
    LineRendererSetup ();
    rayToMouse = new Ray(catapult.position, Vector3.zero);
    leftCatapultToProjectile = new Ray(catapultLineFront.transform.position, Vector3.zero);
    maxStretchSqr = maxStretch * maxStretch;
    CircleCollider2D circle = collider2D as CircleCollider2D;
    circleRadius= circle radius;
  }
  
  void Update () {
    if (clickedOn)
      Dragging ();
    
    if (spring != null) {
      if (!rigidbody2D.isKinematic && prevVelocity.sqrMagnitude>rigidbody2D.velocity.sqrMagnitu
  de) {
      Destroy (spring);
      rigidbody2D.velocity = prevVelocity;
    }
    
    if(!clickedOn)
      prevVelocity = rigidbody2D.velocity;
      
    LineRenderedUpdate ();
    
  } else {
    catapultLineFront.enabled = false;
    catapultLineBack.enabled = false;
  }
}

void LineRendererSetup () {
  catapultLineFront.SetPosition((), catapultLineFront.transform.position);
  catapultLineBack.SetPosition((), catapultLineBack.transform.position);
  
  catapultLineFront.sortingLayerName = "Foreground"
  catapultLineBack.sortingLayerName = "Foreground"
  
  catapultLineFront.sortingOrder = 3}
  catapultLineBack.sortingOrder = 1}
}

void OnMouseDown () {
  spring.enabled = false;
  clickedOn = true;
}

void OnMouseUp() {
  spring.enabled = true;
  rigidbody2D.isKinematic = false;
  clickedOn = false;
}

void Dragging () {
  Vector3 mouseWorldPoint = Camera.main.ScreenToWorldPoint(Input.mousePosition);
  Vector2 catapultToMouse = mouseWorldPoint - catapult.position;
  
  if (catapultToMouse.sqrMagnitude>maxStretchSqr) {
    rayToMouse.direction = catapultToMouse;
    mouseWorldPoint = rayToMouse.GetPoint(maxStretch);
  }
  
  mouseWorldPoint.z =()f;
  transform.position = mouseWorldPoint;
}

void LineRendererUpdate () {
  Vector2 catapultToProjectile = transform.position - catapultLineFront.transform.position;
  leftCatapultToProjectile.direction = catapultToProjectile;
  Vector3 holdPoint = leftCatapultToProjectile.GetPoint(catapulttoProjectile.magnitude + circleRadius);
    catapultLineFront.SetPosition(1, holdPoint);
    catapultLineBack.SetPosition(1, holdPoint);
  }
}
  
  
